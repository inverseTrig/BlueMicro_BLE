#include "keymap.h"

std::array<std::array<Key, MATRIX_COLS>> matrix =
    {{
        { KC_GRV, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7, KC_8, KC_9, KC_0, KC_BSPC },
        { KC_TAB, KC_Q, KC_W, KC_E, KC_R, KC_T, KC_Y, KC_U, KC_I, KC_O, KC_P, KC_BSLS },
        { KC_ESC, KC_A, KC_S, KC_D, KC_F, KC_G, KC_H, KC_J, KC_K, KC_L, KC_SCLN, KC_QUOT },
        { KC_LSHIFT, KC_Z, KC_X, KC_C, KC_V, KC_B, KC_N, KC_M, KC_COMM, KC_DOT, KC_ENT },
        { KC_LCTL, LAYER_3, KC_LALT, KC_LGUI, LAYER_1, KC_SPC, KC_BSPC, LAYER_2, KC_LEFT, KC_DOWN, KC_UP, KC_RIGHT}
    }};

void setupKeymap() {
    uint32_t layer1[MATRIX_ROWS][MATRIX_COLS] =
        KEYMAP(
            KC_F12, KC_F1, KC_F2, KC_F3, KC_F4, KC_F5, KC_F6, KC_F7, KC_F8, KC_F9, KC_F10, KC_F11,
            KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_LPRN, KC_RPRN, KC_P7, KC_P8, KC_P9, KC_TRNS, KC_TRNS,
            KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_LBRC, KC_RBRC, KC_P4, KC_P5, KC_P6, KC_TRNS, KC_TRNS,
            KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_LANG1, KC_LCBR, KC_RCBR, KC_P1, KC_P2, KC_P3, KC_TRNS, KC_TRNS,
            KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, LAYER_3, KC_P0, KC_MEDIA_PREV_TRACK, KC_MEDIA_NEXT_TRACK, KC_MEDIA_PLAY_PAUSE);

    uint32_t layer2[MATRIX_ROWS][MATRIX_COLS] =
        KEYMAP(
            KC_F12, KC_F1, KC_F2, KC_F3, KC_F4, KC_F5, KC_F6, KC_F7, KC_F8, KC_F9, KC_F10, KC_DELETE,
            KC_TRNS, KC_TRNS, KC_TRNS, KC_UNDS, KC_PLUS, KC_LPRN, KC_RPRN, KC_HOME, KC_UP, KC_END, KC_TRNS, KC_TRNS,
            KC_TRNS, KC_TRNS, KC_TRNS, KC_EQL, KC_MINS, KC_LBRC, KC_RBRC, KC_LEFT, KC_DOWN, KC_RIGHT, KC_TRNS, KC_PSCR,
            KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_LCBR, KC_RCBR, KC_TRNS, KC_TRNS, KC_DISPLAY_BRIGHTD, KC_DISPLAY_BRIGHTI, KC_TRNS,
            KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, LAYER_3, KC_TRNS, KC_TRNS, KC_TRNS, KC_AUDIO_MUTE, KC_AUDIO_VOL_DOWN, KC_AUDIO_VOL_UP, KC_MEDIA_PLAY_PAUSE);

    uint32_t layer3[MATRIX_ROWS][MATRIX_COLS] =
        KEYMAP(
            KC_F12, KC_F1, KC_F2, KC_F3, KC_F4, KC_F5, KC_F6, KC_F7, KC_F8, KC_F9, KC_F10, KC_DELETE,
            KC_TRNS, KC_TRNS, KC_TRNS, KC_UNDS, KC_PLUS, KC_LPRN, KC_RPRN, KC_HOME, KC_UP, KC_END, KC_TRNS, KC_TRNS,
            KC_TRNS, KC_TRNS, KC_TRNS, KC_EQL, KC_MINS, KC_LBRC, KC_RBRC, KC_LEFT, KC_DOWN, KC_RIGHT, KC_TRNS, KC_PSCR,
            KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_LCBR, KC_RCBR, KC_TRNS, KC_TRNS, KC_DISPLAY_BRIGHTD, KC_DISPLAY_BRIGHTI, KC_TRNS,
            KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, LAYER_3, KC_TRNS, KC_TRNS, KC_TRNS, KC_AUDIO_MUTE, KC_AUDIO_VOL_DOWN, KC_AUDIO_VOL_UP, KC_MEDIA_PLAY_PAUSE);

    for (int row = 0; row < MATRIX_ROWS; ++row)
    {
        for (int col = 0; col < MATRIX_COLS; ++col)
        {
            matrix[row][col].addActivation(_L1, Method::PRESS, layer1[row][col]);
            matrix[row][col].addActivation(_L2, Method::PRESS, layer2[row][col]);
            matrix[row][col].addActivation(_L3, Method::PRESS, layer3[row][col]);
        }
    }
}